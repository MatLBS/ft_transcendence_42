// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model User {
  id             Int     @id @default(autoincrement())
  username       String  @unique
  password       String?
  email          String  @unique
  profilePicture String?
  bgPicture      String?
  language       String?
  isOnline       Boolean
  twoFactor      Boolean

  following      Follow[] @relation("UserFollows")
  followers      Follow[] @relation("UserFollowed")
  user1          Conversation[] @relation("User1Conversations")
  user2          Conversation[] @relation("User2Conversations")
  messages       Message[]
}

model Follow {
  follower   User     @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  followerId Int
  followed   User     @relation("UserFollowed", fields: [followedId], references: [id], onDelete: Cascade)
  followedId Int
  createdAt  DateTime @default(now())

  @@id([followerId, followedId])
}

model Tournament {
  id      Int                 @id @default(autoincrement())
  players TournamentPlayers[]
  matches  TournamentMatches[]

  nbRounds   Int?
  currentRound Int?
  nbMatchesPlayed Int?
  nbMatchesPlayedRound Int?
}

model TournamentPlayers {
  id           Int        @id @default(autoincrement())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int

  name         String
  NbVictory    Int
  playerNumber Int
}

model TournamentMatches {
  id           Int        @id @default(autoincrement())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int

  winner String?
  winnerId Int?
  loser  String?
  loserId Int?
  winnerScore  Int?
  loserScore  Int?
  matchDate     DateTime   @default(now())
}

model Local {
  id      Int            @id @default(autoincrement())
  players LocalPlayers[]

  winner String?
  winnerId Int?
  loser  String?
  loserId Int?
  winnerScore  Int?
  loserScore  Int?
  matchDate     DateTime   @default(now())
}

model LocalPlayers {
  id      Int   @id @default(autoincrement())
  local   Local @relation(fields: [localId], references: [id])
  localId Int

  username String
}

model Solo {
  id      Int            @id @default(autoincrement())

  winner String?
  winnerId Int?
  loser  String?
  loserId Int?
  winnerScore  Int?
  loserScore  Int?
  matchDate     DateTime   @default(now())
}

model Conversation {
  id         Int        @id @default(autoincrement())

  user1      User       @relation("User1Conversations", fields: [user1Id], references: [id])
  user1Id    Int

  user2      User       @relation("User2Conversations", fields: [user2Id], references: [id])
  user2Id    Int

  messages   Message[]
  createdAt  DateTime   @default(now())
  updateAt   DateTime   @updatedAt

  @@unique([user1Id, user2Id])
}


model Message {
  id             Int          @id @default(autoincrement())
  content        String
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  createdAt      DateTime     @default(now())
}
